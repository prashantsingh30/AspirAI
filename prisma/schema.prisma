generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  bio        String?
  experience Int?
  skills     String[]

  assessments Assessment[]
  resume      Resume?
  coverletter CoverLetter[]
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float //overall quiz quizScore
  questions      Json[] //Array of (question,answer,userAnswer,isCorrect)
  category       String //"Technical","Behavorial",etc
  improvementTip String? //AI generated improvement Tip
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String   
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String    @default("draft") 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id       String @id @default(cuid())
  industry String @unique

  user User[]

  salaryRanges Json[]

  growthRate  Float
  demandLevel DemandLevel
  topSkills   String[]

  marketOutlook MarketOutlook
  keyTrends     String[]

  recommendedSkills String[]

  lastUpdated DateTime @default(now())
  nextUpdate  DateTime

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
